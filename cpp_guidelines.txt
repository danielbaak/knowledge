:encoding: UTF-8
// The markup language of this document is AsciiDoc


= C&plus;&plus; guidelines

This document is about C&plus;&plus; specific guidelines. For progamming
language agnostic guidelines, see ++programming_guidelines.txt++.



== Types to be used

General notes:

- Try to keep number of objects low.
- Especially try to avoid creating objects which directly or indirectly own
  ressources (typicall memory) by other means than either move constructing or
  a constructor not actually allocating ressources yet.  In other words, try
  to avoid calling constructors actually allocating ressources.  Of course at
  one point we need to create a fresh object, but we shouldn't do it
  unnecessarily.
- In other words, prefer reusing existing objects (and thus the ressources
  they own) over creating new ones in a way where constructor allocates new
  ressources.


=== Types for parameters

General notes:

- Top level const is an implementation detail, it's _not_ part of the
  interface. See also const correctness.
- Prefer references over pointers. Use pointers when `there is no pointee'
  (i.e. nullptr) is a valid case. Rational: It's easier to do right, because
  you don't have to remember to do nullptr checks before dereferencing.
- Observer: Use structured lifetimes to ensure the object passed will not be
  destructed before the function returns: Only pass objects that are only
  reachable by the set of current and ancestor scopes.  If you have a shared
  pointer object which is reachable by others than the current or ancestor
  scope, pin the pointee by making an unaliased local copy of the shared
  ptr obj.  ++auto pin = global_ptr;++ then ++foo(*pin);++ or ++pin->foo++.


[cols="1,1,1,7",options="header"]
|======
3+| (Composed) type | When to use for a parameter

4+| No indirection
| `T [const]` | |  | Names: Pass by value / observer (aka in-param)

- For builtin types. Or more generally: When indirection to the parameter
  object is more costly than constructing plus destructing the parameter
  object.

Tweaks:

- When function needs to construct a _new_ object anyway. Don't use pass by
  value to assign to an existing object. Rational, looking at objects directly
  or indirectly owning resources (typically memory): The constructor of the
  parameter object was forced to allocate resources. But if we passed the
  parameter by some indirection, we might be able to re-use the resource(s) of
  the existing object. Notes: It's now also easier to make the function
  noexcept. Note however that this can be seen as a white lye, since now it's
  the caller's job to create the parameter object, and if the constructor she
  chooses does throw, then technically our function's no-throw guarantees
  holds, but arguably the complete act of calling the function, inclusive
  constructing paramters, can potentially throw.


4+| One level of indirection

| `T const` | `*[const]\|&` |  | Name: Pass by ptr-to-const / const-ref / (Continuous) observer (aka in-param)

- When function does not want to assume ownership.

- Note: Pointee must outlive duration of function call, which is guaranteed
  when it's an local, thanks to structured lifetimes.


| `T` | `*[const]\|&\|&&` |  | Name: Pass by ptr-to-non-const / non-const-ref / In-Out parameter

- When in addition to the above, the function needs to modify the pointee.

Tweaks:

- +++T&&+++: When function want's to move from the parameter (but not to
  construct a new object, see pass by value). But note that now you can't pass
  lvalue arguments. So the guideline is that in general you should _not_ have
  an +++T&&+++ parameter, only a +++T const&+++. If you really want the
  benefits of +++T&&+++, the next best practical thing is to overload: one
  taking +++T const&+++, the other taking +++T&&+++. You could also write a
  template to remove the redundancy of two implementations, but the way you
  would do that is ``unteachable''.


| `T[const]` | `{up\|sp} [const]` | | Name: Pass smart pointer by value

**Sink** (+unique_ptr+) / **share** (+shared_ptr+).

- Function want's to retain (shared) ownership.

4+| Two level of indirection, usefull variants

| `T[const]` | `up\|sp\|*` |  `*[const]\|&` | Name: Pass non-const smart/raw ptr by ptr/lvalue-ref

*Might reseat*: Callee will or might reseat.  `&` makes the most sense.
`*[const]` in the seldom case that `no unique_ptr object' (+nullptr+) is a
valid option.

| `T[const]` | `sp const` | `*[const]\|&`  | Name: Pass const shared ptr by ptr/lvalue-ref

*Might share*.  Callee might retain shared ownership.  `&` makes the most
sense.  `*[const]` in the seldom case that `no shared_ptr object' (+nullptr+)
is a valid option.

4+| Two level of indirection, variants being mostly meaningless or invalid


| `T[const]` | `{up\|*} const` | `*[const]\|&` | Name: Pass const unique/raw ptr by ptr/
lvalue-ref

Mostly meaningless.  Having read-only access to an smart_ptr object usually
doesn't make sense.  Also having read-only access via indirection to an raw
pointer usually doesn't make sense -- use `T*` instead, i.e. pass the pointer
by value.

| `T[const]` | `{up\|sp\|*}[const]` | `&&` | Name: Pass [const] smart/raw ptr by rvalue-ref

??

| `T[const]` | `{&\|&&}[const]` | `*[const]\|&\|&&` |
Ptr/ref to ref is invalid.

|======


References:

- http://herbsutter.com/2013/06/05/gotw-91-solution-smart-pointer-parameters/[GotW #91: Smart Pointer Parameters]


=== Types for return value

Guidelines:

- Return by value. Move semantics ensure that caller has no expensive copy costs.
- Except for types where move is expensive (effectively is a copy, either more
  than 1kB and/or at least one allocation). Use an out-parameter for those.

Tweaks:

- When returned type T is a collection (vector, string, ...), and you know
  that callers often do a certain insertion operation with the result
  (e.g. +++myString.append(readline())+++), consider adding an overload
  (e.g. +++void readline(string& target)+++) which does the insertion
  internally. Rational: The return by value variant has the disadvantage that
  the returned object _always_ must allocate memory to hold the payload, and
  the return value object must be destroyed.

Furthe Notes:

- Don't return by +++const T+++. It's even illegal for builtin types. It
  destroys move semantics since it's no longer a valid argument for a
  +++T&&+++ parameter.  The returned object belongs to the caller, so the
  caller, not the callee, shall decide whether that object should be const
  or not.


=== auto
- Guarantees no implicit conversion will take place, i.e. it's also more
  performant.
- DRY
- less verbose, i.e. less distracting clutter
- Program against interfaces and concepts, not implementations and concrete
  types.  Note that in expression using temporaries (i.e. nearly all
  expressions) and in templates we also don't state the concrete type
  explicitly.


=== Namespaces

Namespace usings are for your convenience, not for you to inflict on others:
Never write a using declaration or a using directive before an #include
directive.

Namespaces deliver the powerful advantage of unambiguous name management. Most
of the time names are unambigous, ambiguities are rare. using declarations
make namespaces usable, because they greatly reduce code clutter in the common
case where names are unambigous and still let you qualify names only ine those
rare cases where you need to resolve an actual ambiguity. [However it is
difficult to know where there are ambiguities, even more so know it up front,
i.e. the included headers might change and silently introduce new
ambiguities].

If the implementation has a using, and the library (i.e. the included headers)
change in that they add, remove names or modify signatures), that silently might make


- http://stackoverflow.com/questions/1452721/why-is-using-namespace-std-considered-bad-practice
- C++ Coding Standards: 101 Rules, Guidelines, and Best Practices.

== Misc

=== Declare functions +noexcept+ whenever possible

- Is part of interface, so you cannot easily remove it later
- Allows the compiler to do more optimizations, see also next point.  *to-do*
  why exactly?  More examples.
- As with const correctness, there is a ripple effect.  By not making
  functions which should be noexcept noexcept, it's more difficult to make
  calling functions noexcept and / or making them promise the strong exception
  guarantee.  Or the calling function have to revert (the decision being made
  at compile time) to use an alternative less preferable functions which are
  noexcept, e.g. copy ctor/assign instead the preferred move ctor/assign, see
  e.g. +move_if_noexcept+ [*to-do* 1) is there also something to test if any
  function has noexcept?  2) For moveonly types an rvalue is returned
  neverthelless, so the wrong thing happens -- the throwing move ctor is
  called ? ].
  ** e.g. take a raw array based container, and imagine the implementation of
     push_back which (always / usually?) provides the strong exception
     guarantee.  When re-sizing, using multiple copy-ctor calls, if one fails,
     the original array is still untouched, thus push_back can be implemented
     giving the strong guarantee.  But when using move-ctors, each of those
     modifies it's element of the original array.  If one throws, push_back
     cannot not provide the strong guarantee.  But if the move-ctor promises
     to never throw via noexcept, the problem vanishes and push_back can use
     auch noexecpt move-ctors and provide the strong guarantee.
- important special cases: particular functions which really should be
  no-except if possible.  *to-do*: why especially?  maybe because they are
  often used functions by the standard library?
    code)
  * make move-ctor
  * swap, see Effective C&plus;&plus; Item 25


- https://www.youtube.com/watch?v=BezbcQIuCsY, probably in book Effective Modern
C&plus;&plus;.
- https://akrzemi1.wordpress.com/2014/04/24/noexcept-what-for/

=== Const correctness

Top-level const on a pass-by-value parameter is an implementation detail; the
signature is exactly the same. Thus don't use it in a function's declaration,
but by default use it in the function's
definition. http://herbsutter.com/2013/05/28/gotw-6b-solution-const-correctness-part-2/


 * In a method _declaration_ a parameter should not be marked const, since it
   has no effect whatsoever.
 * In a method _definition_, the normal guidelines apply whether or not a
   parameter (which is just a local variable) should be const or not.
 * Prefer const member methods to non-const member methods
 * *To-do*: in case of return by value, should return type be const or not?
   For C&plus;&plus;11, to support rvalue references, all seem to agree that
   non-const is the better heuristic.  Before C&plus;&plus;11: Gotw says const
   for non builtin types, Effective C&plus;&plus; Item 3 says const (however
   the errata http://www.aristeia.com/BookErrata/ec++3e-errata.html
   relativates).  I personally think trains like
   x.strip(...).reverse(...)... are `good', and they need mutable objects (no
   they don't, probably they modify the this object and return a reference to
   the this object).  Also I feel that the returned object belongs to the
   caller, so it's the caller who can decide about constness.  I think when
   declaring return type const the callee patronizes _all_ it's callers
   telling them (one could oppose that the caller can use const cast, but that
   makes the trains very verbose and inconvenient )
 * Prefer const member methods over non-const.  Rational: 1) Allows working
   with const objects.  2) The interface is easier to understand when one
   knows which methods do modify an object and which don't.


See also:

- http://www.gotw.ca/gotw/006.htm,
- http://www.gotw.ca/gotw/081.htm,
- http://herbsutter.com/2013/05/28/gotw-6b-solution-const-correctness-part-2/
- Effective C&plus;&plus; Item 3.


=== The big three (four in C&plus;&plus;11) and a half

http://stackoverflow.com/questions/4172722/what-is-the-rule-of-three

If you need to explicitly declare either the destructor, copy constructor or
copy assignment operator yourself, you probably need to explicitly declare all
three of them.  Extend: you should also declare a friend function swap.

--------------------------------------------------
class A {
    
};
--------------------------------------------------


==== Assignment operator / copy-and-swap idiom

--------------------------------------------------
class A {
    A() { ... };
    A(const A& rhs) { ... }

    // strong exception guarantee
    A& operator=(A rhs) { // (1)
        swap(*this, other); // (2)
        return *this;
    } 

    // strong exception guarantee
    friend void swap(A& a, A& b) { // nothrow
        // enable ADL, not necessary in our case, but good practice
        using std::swap;
        // member-wise swap:
        swap(a.mMember1, b.mMember1); 
        swap(a.mMember2, b.mMember2);
        ...
    }
};
--------------------------------------------------

http://stackoverflow.com/questions/3279543/what-is-the-copy-and-swap-idiom


=== implicit defined ctor/dtor vs user defined

- ability to be POD / aggregate
 - since many members have that property not, also the whole often cant be it anyway
- ctor is meant to establish class invariant and or alloc resources
- So its about decoupling interface <-> implementation and the improved incremental build properties vs more efficient ctors/dtors (which also affects copying and thus containers)
 - it is a very seldom event that the implementation of a dtor changes from
   default/emptybody to user defined. So the costs of recompiling are
   neglectible. It is an seldom event because that only happens if the class
   suddenly becomes direct (i.e. not via say smart pointer) owner of a
   ressource.
 - it is also rather seldom that the impl of the default ctor changes from
   default / emptybody to user defined, because it only happens when the class
   becomes direct owner of a ressource or a new class invariant is introduced
   that must be handled also by the default ctor.

- dont forget that there's still the copy ctor/assignment
- dtor is meant to free resources -> if there are no resources, no ctor is needed
 - a base class does not know whether derived class needs a dtor -> typically
   base class needs to declare virtual dtor anyway
- having an user defined ctor/dtor communicates: I have class invariants
  and/or I directly manage resources. However that is still an implementation
  detail, i.e. should not be part of the interface. After all, there's still
  the implicitly declared versions.

== References

- http://herbsutter.com/gotw/

== Raw/smart pointers

Use unique_ptr by default, use shared_ptr when you _know_ you need shared
ownership.  unique_ptr can always be moved to a shared_ptr.  If you _know_ you
need shared ownership, use make_shared.

== Copy-and-swap idiom

A recipe how to write copy/move constructor/assignment aimed to be general,
simple and correct, as oppsed to specialized and/or efficient.

This idiom is just something that works and is hard to do wrong. For every
particular class, there is almost certainly a more efficient
route. Copy-and-swap isn't _the_ way to do copies or assignment, it's _a_
way.

- no-throw guarantee:
 * if pass by value: kind of a lie, since the caller must make a copy which
   can throw, i.e. its not possible to call without possibly being thrown at
 * if passed by const ref: then there is no no-throw guarantee since
   the internal copy constructor can throw
- strong exception guarantee: granted
- Missed opportunity to reuse resources: the ressources of the old state could be reused
- Code duplication: swap and copy-ctor are now pretty redundant, no?



== Misc

- When overriding, explicitely use +override+.


== References

- Book: Effective C&plus;&plus; (3rd Edition). Scott Meyers.
- Book: More Effective C&plus;&plus;. Scott Meyers.
- Book: Effective Moder C&plus;&plus;. Scott Meyers.
- Book: Effective STL. Scott Meyers.
- Book: A tour of C&plus;&plus;. Bjarne Stroustrup.
- Book: The C++ Programming Language (4th Edition). Bjarne Stroustrup.
- Webpage: The Definitive C&plus;&plus; Book Guide and List: https://stackoverflow.com/questions/388242/the-definitive-c-book-guide-and-list
- Video: CppCon 2015: Bjarne Stroustrup "Writing Good C+&plus;14": https://www.youtube.com/watch?v=1OEu9C51K2A&t=1494s
- Video: CppCon 2015: Herb Sutter "Writing Good C&plus;&plus;14... By Default": https://www.youtube.com/watch?v=hEx5DNLWGgA
- Video: CppCon 2014: Herb Sutter "Back to the Basics! Essentials of Modern C&plus;&plus; Style": https://www.youtube.com/watch?v=xnqTKD8uD64&t=3470s
- Video: CppCon 2016: Herb Sutter "Leak-Freedom in C&plus;&plus;... By Default.": https://www.youtube.com/watch?v=JfmTagWcqoE&t=4780s


//  LocalWords:  noexcept Callee Reseat reseat Scott's
