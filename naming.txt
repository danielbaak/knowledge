= Meaningfull Names
Florian Kaufmann <sensorflo@bigfoot.com>

A summary of chapter 2 of "Clean Code", Robert C. Martin

== Motivation

- One part of clean code   
- Names are everywhere (Files,Classe,Methods,...)
- We name all the time, so we better be good at it
  
== Be consistent
  
- Same thing has the same (base) name, and exactly same writting  
  - So the reader doesn't need a table which names are synonyms (see also mental mapping)
    - give anti example of such a mental table
    - i really had to make such tables, even write them down, because I coudn't keep them in mind
  - So a writer doesn't has too look up the exact spelling
  - Quicker searching / writing (no need to look up actual name)
  
- Stick with *one* of:
  * get, fetch, retreive
  * controller, manager, driver
  
- If you had a controller and a manager: what should the reader think it's the
  difference?
  
  
== Avoid mental mapping / Use intention revealing names

- Most very short names (a,b,x,y,tmp) are used as placeholder, and the reader always
  has to map them to the actual concept. 
- i,j,k for loop counters are ok because they are traditional, and thus the
  reader doesn't need to mentaly map them
- If a variable *requires* a comment, it's a smell. (Classes, members, methods
  should be documented nevertheless just to make it clear - clarity is king).
  
  void copy(char a1[], char a2[])
  {
    
  }
  
  void copy(char destination[], char source[])
  {
    
  }
  
== Use pronouncable names

- The human brain is good at words, which are by definition pronouncable.
- 
  
GenerationDate instead genymd (year, month, day)
  
[Personal opinion: abbrevs are ok, they are spoken in mind (I speak source, not
es ar cee)]


== Don't be cute / Don't show off your smartness

Bad examples:
- whack for an premature abort
- r for an url with host and scheme removed

- Every should be able to read the code  
- Choose clarity over entertainment value

  
== Avoid disinformation

examples of disinformation   
- inconsistent naming
- use of names that already have a meaning for us programmers for another thing
  
exmaples of noninformation  
- Avoid noninformative words like manager, processor, data, info
  
examples of information
- same thing has same name
- different things have different names
  
  
== Make Meaningful Distinctions

If you have multiple similar things, then the name should reveal the difference.    
  
Don't use noise words to make a 'distinction' (its then only a pseudo distinction). Customer instead customerInfo,
account instead accountData.
  
   
== Use of solution/problem domain names

- People reading the code are also programmers
   
   
== Add meaningfull context   
   
- Only a few names are meaningfull for themselves
  - 'State': like on/off or like Nevada?
- 
     
== Don't add gratuitous context  
  
Our Mod's interface methods always have the mod's prefix.  
    
   
   
== fads

.Class names
- Nouns, noun phrases: Customer, WikiPage, Account

.Method names
- verb, verbphrase
  
- Name = abbreviated brief comment
- A variable has one Aufgabe (thats why i use const).
- Length of variable should correspond to the size of its scope. Local names can
  be short, members can be medium, class names shoudnt be short.
- Shorter names are generally better; however they must be clear in theyr whole scope.
- Don't be afraid of renaming. The better readability pays off for all future
  reading of the code. 
- Try different names, look at the resulting code, how it feels/reads.  
- When the code just reads like a prosa text, without the needs for comments, then
  you accomplished the goals of good naming.
- As the feature set gets bigger and bigger, names must change, when new new
  names have similarities/differences with existing names to make those
  similarities/differences clear.  

== Personal

Experience show me that I prefer abbrevations when the full word is used many
many times. Then a reader will get accustimized to the abbrev quickly. The full
word makes the code cumbersome to read because too many variables get too long,
not even simple statements fit onto one line.
