This page is about how the Flori project sees unit tests. For more practical info, see [[UnitTest2 Practice]] (proper unit tests) and [[UnitTest Practice]] (outdated way of 'unit tests').

== Definition ==
There are multiple opinions what a unit test exactly is. Common acknowledged is that it tests at the lowest level; all other test types test at higher levels. At the end, each project has to make its own definition. In the Flori project, we like the following definition stemming from Michael Feathers' book "Working Effectively with Legacy Code" chapter "What is Unit Testing": A unit test is fast, has high defect localization and has high code coverage. Note that in this view isolating the unit under test can be a good thing, but is ''not'' a requirement for a unit test, see [[#When to isolate unit under test]].

;Very fast 
:It is fast enough when developers really let it run after every little step, say a few lines. As the agile demands you can then build/refactor the SW in tiny verified steps. That is you get a very tight feedback loop. Only with fast unit tests [[TDD]] is feasible. Naturally there is a continuum, it's not a black & white thing: The faster the unit test, the smaller the verified steps can be in practice in which we build the SW, which is considered a good thing. Also, the measured duration naturally includes build time, thus also the build time must be fast. As a rule of thumb, a single test which needs more than 10ms is considered a too slow test. Google test prints the duration for each test.

;High defect localization
:High defect localization means that when a test fails, you're able to locate the defect very quickly. A unit test tests the smallest units of the SW, thus defects can be localized rather quickly. We think it is ''not'' strictly needed to isolate the unit under test to maintain a high defect localization, see [[#When to isolate unit under test]]. Defect localization is too low when people start to make less use of unit tests, because experience told them that fixing them involves a lot of work. Defect localization is good when people use unit tests all the time because experience tells them that fixing a test is a matter of seconds / minutes and really helps them to prevent defects from sneaking in.

;High code coverage
:Unit tests, when compared to other tests such as system or component tests, shall have the highest [[Code Coverage|code coverage]]. When using TDD, you automatically get a rather high code coverage since the only productive code you write is because a test forced you to do so.

;Inherited properties of automated tests
:All good tests, whether unit tests or some other form of automated tests, honor [[Automated Test#Properties|properties of automated tests]].

== Benefits ==

Everyone knows that unit tests have benefits. An incomplete list of points which might not be obvious when you are a unit test beginner:

* Repels bugs - because of the tight feedback loop, bugs are never really introduced into the code. Seconds after you write a bug you detect your mistake. 
* Similarly: the sooner a defect is fixed the cheaper it is to fix it. 
* Helps to have clean code because it drastically helps to do refactorings whenever needed. There is no barrier anymore to do a refactoring since you have the tests as feedback whether you did the refactoring right.
* Similarly, helps to live the "last boy scout rule" stating to always leave the code (campground) a bit cleaner than you found it. I.e. you should on the fly, while doing any task, remove code smells by a small refactoring whenever you smell a code smell. 


== When to isolate unit under test ==
(Partially) isolating a unit under test ([[Automated Test#Terms|UUT]]) means to replace (some of) the real objects the UUT depends upon by [[Automated Test#Test double|test doubles]]. During a test the set of [[Automated Test#Terms|DOC]]s (Depended-on components) thus consists of a mixture of real objects and test double objects.

Isolating the unit under test has benefits but also costs. To decide whether to use the real object or the test double, remember our definition of a unit test: very fast, high defect localization and high code coverage. The advice is to use the real object in general, and a test double object when these goals are in danger, i.e. when:

* The real object is too slow, a faster test double is required. A single test should execute well below 10ms. Googletest's output shows the duration for each test.
* Using the real object leads to low defect localization. E.g. when the real object doesn't has an unit test itself. If a UUT depends upon a large graph of real objects with no tests, and a bug is accidentally introduced in any of those untested real objects, it becomes increasingly difficult to fix the unit test. Naturally because the defect can be in any of those untested objects. The best thing to do is to write new tests for the currently untested real object our current UUT depends upon. If that is ''really'' not feasible, replace the untested real object with a test double. Also comment that fact, so the test double can be replaced with the real object again as soon as the real object does get it's unit test.
* Using the real object leads to bad code coverage. For example when using the real object it is not feasible to setup the [[Automated Test#Terms|fixture]] (union of UUT and DOCs) such that we can exercise the UUT. See [[Code Coverage]] for ways how to measure the current code coverage.
* It is a test which has expectations how he UUT must call/use the DOC. In this case use a [[Automated Test#Test double|mock]] or [[Automated Test#Test double|spy]] as test double. However this is white box testing, and we prefer black box testing when feasible, see [[Unit_Test#White_Box_vs_Black_Box|White Box vs Black Box]].


The following is discussion of the topic for the interested reader only:

There are multiple views whether or not a unit under test should be strictly isolated or not.  One point in this discussion I'd like to state here: Its true that when the unit under test is not completely isolated, and a defect creeps in an other unit which is used by the unit under test, multiple tests will fail. But that does not reduce defect localization much, since when multiple tests fail:
* We look at the failed tests of the leaf objects (of the depended-on objects graph) first
* Unit tests are run often, so since the last successful test, only little code has changed, further narrowing the defect locality.
* There are plans to introduce an 'oracle', which would help to order multiple failed tests so we can look at that failed test first that most likely leads us to the defect. See [[Googletest#Oracle|Oracle]]

Isolating the UUT also has costs. The more you isolate the UUT, the ...:
* ... more test double objects you need to setup in ''each'' test. If each UUT is strictly isolated, each test has to setup a lot of test doubles. I.e. ''each'' test becomes a bit harder to understand, which lowers the defect localization, the very thing we tried to enhance by isolating the UUT more.
* ... the complexer the productive code's design becomes. It moves towards every class is being decoupled from any other. No class can go the simple way and directly use another class. Decoupling is a good thing but it comes at the cost of increased complexity and you need to think about the trade-off / balance.

See also:
* [http://martinfowler.com/articles/mocksArentStubs.html Mocks aren't stubs]
* Book 'xUnit Test Patterns'. The book has many spread statements on the topic. Unfortunately there isn't one single place where the author summarizes the pros and cons and gives a clear statement what he would advice. These chapters can be a start:
** '5: Principles of Test Automation / Principle: Isolate the SUT'
** '11: Using Test Doubles / Other Considerations'

== White Box vs Black Box ==
In the Flori project we prefer unit tests which do black box testing over those doing white box testing.

;Black box testing 
:means to only access the public interface of the UUT. 

;White box testing 
:means e.g. accessing protected / private members. Or making use of [[Automated Test#Test double|mock objects using EXPECT_CALL]] or [[Automated Test#Test double|spy objects]] which observe the calls the UUT internally makes.

Flori unit tests are allowed to do white box testing. Nevertheless try to avoid white box testing and do black box testing whenever feasible. White box testing can lead to a number of undesired test smells, such as overcoupled SW (tests and productive code are too tightly coupled), overspecified SW or fragile tests. It becomes harder to refactor the productive code without having to touch the test code. That's quite the opposite of one of the goals we wanted to achieve with unit tests, namely to be able to quickly and conveniently do refactorings.



The following is discussion for the interested reader only:

Citations from testing resources which also state to prefer black box testing over white box testing, while still allowing white box testing:
* Googlemock, see [http://code.google.com/p/googlemock/wiki/CookBook#Knowing_When_to_Expect Knowing when to expect].
* 'Use Front Door First' principle explained the book 'xUnit Test Patterns'

== See Also ==
* [[Testing]] Parent level page with all the testing links, continue from there
